//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAPIClinica
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HistoriaClinicaEntities : DbContext
    {
        public HistoriaClinicaEntities()
            : base("name=HistoriaClinicaEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Medico> Medicos { get; set; }
        public virtual DbSet<Persona> Personas { get; set; }
        public virtual DbSet<Telefono> Telefonos { get; set; }
    
        public virtual int registraTelefono(Nullable<int> idPersona, Nullable<int> idTipoTelefono, string numeroTelefono)
        {
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("IdPersona", idPersona) :
                new ObjectParameter("IdPersona", typeof(int));
    
            var idTipoTelefonoParameter = idTipoTelefono.HasValue ?
                new ObjectParameter("IdTipoTelefono", idTipoTelefono) :
                new ObjectParameter("IdTipoTelefono", typeof(int));
    
            var numeroTelefonoParameter = numeroTelefono != null ?
                new ObjectParameter("NumeroTelefono", numeroTelefono) :
                new ObjectParameter("NumeroTelefono", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("registraTelefono", idPersonaParameter, idTipoTelefonoParameter, numeroTelefonoParameter);
        }
    
        public virtual ObjectResult<registraPaciente_Result> registraPaciente(Nullable<int> idSexo, string nombre, Nullable<int> idTipoSangre, string rh, Nullable<System.DateTime> fechaNacimiento, Nullable<int> idLugarNacimiento, string ciudadNacimiento, Nullable<int> idLugarResidencia, string domicilio, Nullable<bool> tabaco, Nullable<bool> alcohol, string ciudadResidencia)
        {
            var idSexoParameter = idSexo.HasValue ?
                new ObjectParameter("IdSexo", idSexo) :
                new ObjectParameter("IdSexo", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var idTipoSangreParameter = idTipoSangre.HasValue ?
                new ObjectParameter("IdTipoSangre", idTipoSangre) :
                new ObjectParameter("IdTipoSangre", typeof(int));
    
            var rhParameter = rh != null ?
                new ObjectParameter("Rh", rh) :
                new ObjectParameter("Rh", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var idLugarNacimientoParameter = idLugarNacimiento.HasValue ?
                new ObjectParameter("IdLugarNacimiento", idLugarNacimiento) :
                new ObjectParameter("IdLugarNacimiento", typeof(int));
    
            var ciudadNacimientoParameter = ciudadNacimiento != null ?
                new ObjectParameter("CiudadNacimiento", ciudadNacimiento) :
                new ObjectParameter("CiudadNacimiento", typeof(string));
    
            var idLugarResidenciaParameter = idLugarResidencia.HasValue ?
                new ObjectParameter("IdLugarResidencia", idLugarResidencia) :
                new ObjectParameter("IdLugarResidencia", typeof(int));
    
            var domicilioParameter = domicilio != null ?
                new ObjectParameter("Domicilio", domicilio) :
                new ObjectParameter("Domicilio", typeof(string));
    
            var tabacoParameter = tabaco.HasValue ?
                new ObjectParameter("Tabaco", tabaco) :
                new ObjectParameter("Tabaco", typeof(bool));
    
            var alcoholParameter = alcohol.HasValue ?
                new ObjectParameter("Alcohol", alcohol) :
                new ObjectParameter("Alcohol", typeof(bool));
    
            var ciudadResidenciaParameter = ciudadResidencia != null ?
                new ObjectParameter("CiudadResidencia", ciudadResidencia) :
                new ObjectParameter("CiudadResidencia", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<registraPaciente_Result>("registraPaciente", idSexoParameter, nombreParameter, idTipoSangreParameter, rhParameter, fechaNacimientoParameter, idLugarNacimientoParameter, ciudadNacimientoParameter, idLugarResidenciaParameter, domicilioParameter, tabacoParameter, alcoholParameter, ciudadResidenciaParameter);
        }
    
        public virtual ObjectResult<selPaciente_Result> selPaciente(Nullable<int> idPaciente)
        {
            var idPacienteParameter = idPaciente.HasValue ?
                new ObjectParameter("IdPaciente", idPaciente) :
                new ObjectParameter("IdPaciente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selPaciente_Result>("selPaciente", idPacienteParameter);
        }
    
        public virtual ObjectResult<spCatalogo_Result> spCatalogo(string catalogo)
        {
            var catalogoParameter = catalogo != null ?
                new ObjectParameter("Catalogo", catalogo) :
                new ObjectParameter("Catalogo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spCatalogo_Result>("spCatalogo", catalogoParameter);
        }
    
        public virtual ObjectResult<loginMedico_Result> loginMedico(string usuario, string passwd)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var passwdParameter = passwd != null ?
                new ObjectParameter("Passwd", passwd) :
                new ObjectParameter("Passwd", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<loginMedico_Result>("loginMedico", usuarioParameter, passwdParameter);
        }
    
        public virtual ObjectResult<registraMedico_Result> registraMedico(Nullable<int> idSexo, string nombre, Nullable<int> idTipoSangre, string rh, Nullable<System.DateTime> fechaNacimiento, Nullable<int> idLugarNacimiento, string ciudadNacimiento, string usuario, string contrasenia)
        {
            var idSexoParameter = idSexo.HasValue ?
                new ObjectParameter("IdSexo", idSexo) :
                new ObjectParameter("IdSexo", typeof(int));
    
            var nombreParameter = nombre != null ?
                new ObjectParameter("Nombre", nombre) :
                new ObjectParameter("Nombre", typeof(string));
    
            var idTipoSangreParameter = idTipoSangre.HasValue ?
                new ObjectParameter("IdTipoSangre", idTipoSangre) :
                new ObjectParameter("IdTipoSangre", typeof(int));
    
            var rhParameter = rh != null ?
                new ObjectParameter("Rh", rh) :
                new ObjectParameter("Rh", typeof(string));
    
            var fechaNacimientoParameter = fechaNacimiento.HasValue ?
                new ObjectParameter("FechaNacimiento", fechaNacimiento) :
                new ObjectParameter("FechaNacimiento", typeof(System.DateTime));
    
            var idLugarNacimientoParameter = idLugarNacimiento.HasValue ?
                new ObjectParameter("IdLugarNacimiento", idLugarNacimiento) :
                new ObjectParameter("IdLugarNacimiento", typeof(int));
    
            var ciudadNacimientoParameter = ciudadNacimiento != null ?
                new ObjectParameter("CiudadNacimiento", ciudadNacimiento) :
                new ObjectParameter("CiudadNacimiento", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("Usuario", usuario) :
                new ObjectParameter("Usuario", typeof(string));
    
            var contraseniaParameter = contrasenia != null ?
                new ObjectParameter("Contrasenia", contrasenia) :
                new ObjectParameter("Contrasenia", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<registraMedico_Result>("registraMedico", idSexoParameter, nombreParameter, idTipoSangreParameter, rhParameter, fechaNacimientoParameter, idLugarNacimientoParameter, ciudadNacimientoParameter, usuarioParameter, contraseniaParameter);
        }
    
        public virtual ObjectResult<verMedico_Result> verMedico(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<verMedico_Result>("verMedico", idParameter);
        }
    }
}
